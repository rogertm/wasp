<?php
namespace WaspCli\Command;

use RuntimeException;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;

abstract class AbstractGeneratorCommand extends Command
{
    /** @var string */
    protected $baseDir;

    /** @var string */
    protected $namespaceRoot;

    /** @var string */
    protected $slugRoot;

    /** @var string */
    protected $textDomain;

    /** @var SymfonyStyle */
    protected $io;

    /** @var Filesystem */
    protected $filesystem;

    /**
     * Overrides Symfony Command initialize to configure common settings.
     */
    protected function initialize(InputInterface $input, OutputInterface $output): void
    {
        parent::initialize($input, $output);

        $this->io         = new SymfonyStyle($input, $output);
        $this->filesystem = new Filesystem();

        // Project root folder (two levels up: cli/Command → cli → /root)
        $this->baseDir = realpath(__DIR__ . '/../../');

        // Read static configuration (generated by project:rename)
        $configPath = $this->baseDir . '/cli/config.json';
        if (! file_exists($configPath)) {
            throw new RuntimeException("Config not found at $configPath. Run project:rename first.");
        }
        $config = json_decode(file_get_contents($configPath), true);
        if (! is_array($config)) {
            throw new RuntimeException("JSON at $configPath is not valid.");
        }

        $this->namespaceRoot = $config['namespace']    ?? 'WASP';
        $this->slugRoot      = $config['slug']         ?? 'wasp';
        $this->textDomain    = $config['text_domain']  ?? 'wasp';
    }

    /**
     * Converts "Foo Bar" to "foo-bar"
     */
    protected function slugify(string $text): string
    {
        $text = iconv('UTF-8', 'ASCII//TRANSLIT', $text);
        $text = preg_replace('/[^\p{L}\p{Nd}]+/u', '-', $text);
        $text = preg_replace('/-+/', '-', $text);
        return strtolower(trim($text, '-'));
    }

    /**
     * Absolute path to a stub inside cli/stubs/
     */
    protected function getStubPath(string $stubName): string
    {
        return $this->baseDir . '/cli/stubs/' . $stubName . '.stub';
    }

    /**
     * Loads the content of a stub. Throws exception if it does not exist.
     */
    protected function loadStub(string $stubName): string
    {
        $stubPath = $this->getStubPath($stubName);
        if (! file_exists($stubPath)) {
            throw new RuntimeException("Stub not found: $stubPath");
        }
        return file_get_contents($stubPath);
    }

    /**
     * Replaces all keys from $replacements array in the stub content.
     * Example: if $replacements = ['{{SLUG}}' => 'my-slug'], it performs str_replace.
     */
    protected function renderStub(string $stubContent, array $replacements): string
    {
        return str_replace(array_keys($replacements), array_values($replacements), $stubContent);
    }

    /**
     * Generates a file at $destinationPath using the stub $stubName and
     * replacing placeholders using $replacements. If it already exists, show error.
     */
    protected function createFileFromStub(
        string $stubName,
        string $destinationDir,
        string $fileName,
        array $replacements
    ): string {
        // 1) Ensure the destination directory exists
        if (! is_dir($destinationDir)) {
            $this->filesystem->mkdir($destinationDir, 0755);
        }

        $fullPath = rtrim($destinationDir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $fileName;

        // 2) If the file already exists, fail
        if (file_exists($fullPath)) {
            $this->io->error("File already exists: $fullPath");
            throw new RuntimeException("Not overwritten: $fullPath");
        }

        // 3) Load stub, render and write
        $stubContent = $this->loadStub($stubName);
        $finalContent = $this->renderStub($stubContent, $replacements);

        file_put_contents($fullPath, $finalContent);

        return $fullPath;
    }
}
